import pandas as pd #data를 다루는 라이브러리
import torch #머신러닝 관련 학습 기법, 모델 등이 저장된 라이브러리
from torch import nn #뉴럴 네트워크 관련 서브섹션

import matplotlib.pyplot as plt #matlab plot lib

data = pd.read_csv('/content/drive/MyDrive/soMLier/02_Linear_Regression_Model_Data.csv')
#예시 data

x = torch.from_numpy(data['x'].values).unsqueeze(dim=1).float() #torch의 numpy array로부터 data를 가져옴
#1차원 float 배열로 전환, pytorch의 tensor이라는 자료형으로 전환되어 저장됨
y = torch.from_numpy(data['y'].values).unsqueeze(dim=1).float()

plt.xlim(0,11) #x의 data 범위를 그래프 상에서 지정해줌
plt.ylim(0,8)
plt.title('soMLier Linear Regression')

plt.scatter(x,y) #x,y data쌍을 점으로 그래프에 보여줌
plt.show() #jupyter가 아니라 그냥 python일 때 그래프를 띄우고 싶을 때

model = nn.Linear(in_features=1,out_features=1,bias=True) 
#함수의 형태 지정, Linear: 입력 개수 지정
#bias: 일차함수의 상수항 존재하면 True(여기서는 원점을 지나지 않기 때문)
print(model)
print(model.weight) #1차함수의 계수가 랜덤으로 설정됨
print(model.bias) #1차함수의 상수항-이것도 랜덤으로

criterion = nn.MSELoss() #MSE 함수를 자동으로 적용을 해줌
optimizer = torch.optim.Adam(params = model.parameters(), lr = 0.01)
#학습을 시키는 방법 중 하나: Adam: gradient ~의 많이 발전된 버전 중 하나
#아까 생성한 model의 parameter update
#learning rate: 미분한 기울기 값에 learning rate를 곱한 만큼 학습값을 변경시킴riterion = nn.MSELoss() #MSE 함수를 자동으로 적용을 해줌

print(model(x)) #x값을 입력했을 때 나오는 y값

for step in range(500): #학습 횟수, 주로 step말고 ephoc 많이 사용
  prediction = model(x)
  loss = criterion(input = prediction, target = y) #MSE error 계산
  #가지고 있는 data와 계산한 prediction 값을 두 개의 input으로 넣어서 error 계산
  
  optimizer.zero_grad() #gradient 값 초기화
  loss.backward() #2주차에 배울 내용임
  optimizer.step() #한 번 학습 완료
  if step %50 == 0: #50번 학습마다 result가 나오도록 함
      print(loss)
      
  def display_results(model,x,y): #결과물 출력 함수: 우리가 가진 data와 학습이 완료된 모델
  prediction = model(x)
  loss = criterion(input = prediction, target = y)

  plt.clf()
  plt.xlim(0,11)
  plt.ylim(0,8)
  plt.title('soMLier Linear Regression result, loss={:.4},w={:.4},b={:.4}'.format(loss.data.item(),model.weight.data.item(),model.bias.data.item())) #소수점 아래 넷째 자리까지 표현
  #.format: 문자열 속에 변수의 값을 출력하고 싶을 때 사용하는 문자열 관련된 method
  plt.scatter(x.data.numpy(), y.data.numpy())
  plt.plot(x.data.numpy(),prediction.data.numpy(),'b--') #formating, 파란색 점선으로 표현하라는 뜻
  plt.show()
  
  display_results(model,x,y)
